const mysql = require('mysql2/promise');
const config = require('./config');

async function updateCategoriesPermissionsTable() {
  let connection;
  
  try {
    connection = await mysql.createConnection(config.database);
    console.log('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ categories...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π
    const [columns] = await connection.execute(`
      SELECT COLUMN_NAME 
      FROM INFORMATION_SCHEMA.COLUMNS 
      WHERE TABLE_SCHEMA = ? AND TABLE_NAME = 'categories' AND COLUMN_NAME IN (
        'view_permissions', 'create_topic_permissions', 'create_subcategory_permissions', 
        'post_permissions', 'moderate_permissions', 'is_locked', 'is_hidden'
      )
    `, [config.database.database]);

    const existingColumns = columns.map(row => row.COLUMN_NAME);
    const requiredColumns = [
      'view_permissions', 'create_topic_permissions', 'create_subcategory_permissions',
      'post_permissions', 'moderate_permissions', 'is_locked', 'is_hidden'
    ];

    const missingColumns = requiredColumns.filter(col => !existingColumns.includes(col));

    if (missingColumns.length > 0) {
      console.log(`üìù –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è: ${missingColumns.join(', ')}`);
      
      for (const column of missingColumns) {
        let columnDefinition;
        switch (column) {
          case 'view_permissions':
            columnDefinition = "ADD COLUMN view_permissions JSON DEFAULT '[\"all\"]' COMMENT '–†–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é'";
            break;
          case 'create_topic_permissions':
            columnDefinition = "ADD COLUMN create_topic_permissions JSON DEFAULT '[\"admin\"]' COMMENT '–†–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ–º—ã'";
            break;
          case 'create_subcategory_permissions':
            columnDefinition = "ADD COLUMN create_subcategory_permissions JSON DEFAULT '[\"admin\"]' COMMENT '–†–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏'";
            break;
          case 'post_permissions':
            columnDefinition = "ADD COLUMN post_permissions JSON DEFAULT '[\"all\"]' COMMENT '–†–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–º–∞—Ö'";
            break;
          case 'moderate_permissions':
            columnDefinition = "ADD COLUMN moderate_permissions JSON DEFAULT '[\"admin\", \"moderator\"]' COMMENT '–†–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é'";
            break;
          case 'is_locked':
            columnDefinition = "ADD COLUMN is_locked BOOLEAN DEFAULT FALSE COMMENT '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –≤—Å–µ—Ö –∫—Ä–æ–º–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤'";
            break;
          case 'is_hidden':
            columnDefinition = "ADD COLUMN is_hidden BOOLEAN DEFAULT FALSE COMMENT '–°–∫—Ä—ã—Ç–∞ –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'";
            break;
        }
        
        await connection.execute(`ALTER TABLE categories ${columnDefinition}`);
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: ${column}`);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –±–∞–∑–æ–≤—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
      await connection.execute(`
        UPDATE categories SET 
          view_permissions = '["all"]',
          create_topic_permissions = '["admin"]',
          create_subcategory_permissions = '["admin"]',
          post_permissions = '["all"]',
          moderate_permissions = '["admin", "moderator"]',
          is_locked = FALSE,
          is_hidden = FALSE
        WHERE view_permissions IS NULL OR create_topic_permissions IS NULL
      `);
      
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
    } else {
      console.log('‚úÖ –í—Å–µ –ø–æ–ª—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã categories:', error);
    throw error;
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

module.exports = { updateCategoriesPermissionsTable };
