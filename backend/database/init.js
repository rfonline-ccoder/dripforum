const { query, testConnection } = require('./config');

// SQL —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
const createTablesSQL = {
  users: `
    CREATE TABLE IF NOT EXISTS users (
      id VARCHAR(36) PRIMARY KEY,
      username VARCHAR(50) UNIQUE NOT NULL,
      email VARCHAR(255) UNIQUE NOT NULL,
      password_hash VARCHAR(255) NOT NULL,
      role ENUM('user', 'vip', 'moderator', 'admin') DEFAULT 'user',
      status ENUM('active', 'banned', 'suspended') DEFAULT 'active',
      avatar_url VARCHAR(500),
      bio TEXT,
      signature TEXT,
      location VARCHAR(100),
      join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
      posts_count INT DEFAULT 0,
      topics_count INT DEFAULT 0,
      reputation INT DEFAULT 0,
      email_verified BOOLEAN DEFAULT FALSE,
      ban_reason TEXT,
      ban_expires_at TIMESTAMP NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
  `,
  
  categories: `
    CREATE TABLE IF NOT EXISTS categories (
      id VARCHAR(36) PRIMARY KEY,
      name VARCHAR(100) NOT NULL,
      description TEXT,
      icon VARCHAR(50),
      parent_id VARCHAR(36),
      position INT DEFAULT 0,
      is_visible BOOLEAN DEFAULT TRUE,
      posts_count INT DEFAULT 0,
      topics_count INT DEFAULT 0,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
      INDEX idx_parent_id (parent_id),
      INDEX idx_position (position)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
  `,
  
  topics: `
    CREATE TABLE IF NOT EXISTS topics (
      id VARCHAR(36) PRIMARY KEY,
      title VARCHAR(255) NOT NULL,
      category_id VARCHAR(36) NOT NULL,
      author_id VARCHAR(36) NOT NULL,
      is_pinned BOOLEAN DEFAULT FALSE,
      is_locked BOOLEAN DEFAULT FALSE,
      views_count INT DEFAULT 0,
      replies_count INT DEFAULT 0,
      last_post_id VARCHAR(36),
      last_post_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
      INDEX idx_category_id (category_id),
      INDEX idx_author_id (author_id),
      INDEX idx_last_post_at (last_post_at),
      INDEX idx_is_pinned (is_pinned)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
  `,
  
  posts: `
    CREATE TABLE IF NOT EXISTS posts (
      id VARCHAR(36) PRIMARY KEY,
      topic_id VARCHAR(36) NOT NULL,
      author_id VARCHAR(36) NOT NULL,
      content TEXT NOT NULL,
      is_edited BOOLEAN DEFAULT FALSE,
      edited_at TIMESTAMP NULL,
      edited_by VARCHAR(36),
      likes_count INT DEFAULT 0,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
      INDEX idx_topic_id (topic_id),
      INDEX idx_author_id (author_id),
      INDEX idx_created_at (created_at)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
  `,
  
  tags: `
    CREATE TABLE IF NOT EXISTS tags (
      id VARCHAR(36) PRIMARY KEY,
      name VARCHAR(50) UNIQUE NOT NULL,
      color VARCHAR(7) DEFAULT '#8b5cf6',
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
  `,
  
  topic_tags: `
    CREATE TABLE IF NOT EXISTS topic_tags (
      topic_id VARCHAR(36),
      tag_id VARCHAR(36),
      PRIMARY KEY (topic_id, tag_id),
      INDEX idx_topic_id (topic_id),
      INDEX idx_tag_id (tag_id)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
  `,
  
  reports: `
    CREATE TABLE IF NOT EXISTS reports (
      id VARCHAR(36) PRIMARY KEY,
      reporter_id VARCHAR(36) NOT NULL,
      reported_user_id VARCHAR(36),
      reported_post_id VARCHAR(36),
      reported_topic_id VARCHAR(36),
      reason ENUM('spam', 'harassment', 'inappropriate', 'cheating', 'other') NOT NULL,
      description TEXT NOT NULL,
      status ENUM('pending', 'resolved', 'rejected') DEFAULT 'pending',
      priority ENUM('low', 'medium', 'high', 'critical') DEFAULT 'medium',
      assigned_to VARCHAR(36),
      resolved_by VARCHAR(36),
      resolved_at TIMESTAMP NULL,
      resolution_note TEXT,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
      INDEX idx_status (status),
      INDEX idx_assigned_to (assigned_to),
      INDEX idx_reporter_id (reporter_id)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
  `,
  
  post_likes: `
    CREATE TABLE IF NOT EXISTS post_likes (
      id VARCHAR(36) PRIMARY KEY,
      post_id VARCHAR(36) NOT NULL,
      user_id VARCHAR(36) NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      UNIQUE KEY unique_like (post_id, user_id),
      INDEX idx_post_id (post_id),
      INDEX idx_user_id (user_id)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
  `,
  
  bans: `
    CREATE TABLE IF NOT EXISTS bans (
      id VARCHAR(36) PRIMARY KEY,
      user_id VARCHAR(36) NOT NULL,
      banned_by VARCHAR(36) NOT NULL,
      reason TEXT NOT NULL,
      ban_type ENUM('temporary', 'permanent') NOT NULL,
      expires_at TIMESTAMP NULL,
      is_active BOOLEAN DEFAULT TRUE,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      INDEX idx_user_id (user_id),
      INDEX idx_is_active (is_active)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
  `,
  
  forum_settings: `
    CREATE TABLE IF NOT EXISTS forum_settings (
      setting_key VARCHAR(100) PRIMARY KEY,
      setting_value TEXT,
      setting_type ENUM('string', 'integer', 'boolean', 'json') DEFAULT 'string',
      description TEXT,
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
  `,
  
  group_permissions: `
    CREATE TABLE IF NOT EXISTS group_permissions (
      id VARCHAR(36) PRIMARY KEY,
      role ENUM('user', 'vip', 'moderator', 'admin') NOT NULL,
      permission VARCHAR(100) NOT NULL,
      granted BOOLEAN DEFAULT TRUE,
      UNIQUE KEY unique_role_permission (role, permission)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
  `
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
async function tableExists(tableName) {
  try {
    const result = await query(`
      SELECT COUNT(*) as count 
      FROM information_schema.tables 
      WHERE table_schema = ? AND table_name = ?
    `, [process.env.MYSQL_DATABASE || 'dripforum', tableName]);
    
    return result[0].count > 0;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`, error);
    return false;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
async function createTableIfNotExists(tableName, createSQL) {
  try {
    const exists = await tableExists(tableName);
    if (!exists) {
      console.log(`üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: ${tableName}`);
      await query(createSQL);
      console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${tableName} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
    } else {
      console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${tableName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`, error);
    throw error;
  }
}

// –í—Å—Ç–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function insertInitialData() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
    const categoriesCount = await query('SELECT COUNT(*) as count FROM categories');
    if (categoriesCount[0].count === 0) {
      console.log('üìù –í—Å—Ç–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      await query(`
        INSERT INTO categories (id, name, description, icon, position) 
        VALUES (UUID(), '–û–±—â–∏–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è', '–û–±—â–∏–µ —Ç–µ–º—ã –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è', 'chat', 1)
      `);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const bcrypt = require('bcryptjs');
      const adminPassword = await bcrypt.hash('admin123', 10);
      
      await query(`
        INSERT INTO users (id, username, email, password_hash, role, email_verified) 
        VALUES (UUID(), 'admin', 'admin@dripforum.com', ?, 'admin', TRUE)
      `, [adminPassword]);
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä—É–º–∞
      await query(`
        INSERT INTO forum_settings (setting_key, setting_value, setting_type, description) VALUES 
        ('forum_name', 'Arizona DRIP Forum', 'string', '–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä—É–º–∞'),
        ('forum_description', '–§–æ—Ä—É–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è Arizona DRIP', 'string', '–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ä—É–º–∞'),
        ('posts_per_page', '20', 'integer', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ'),
        ('topics_per_page', '25', 'integer', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ'),
        ('allow_registration', 'true', 'boolean', '–†–∞–∑—Ä–µ—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'),
        ('require_email_verification', 'false', 'boolean', '–¢—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email')
      `);
      
      console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    } else {
      console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function initializeDatabase() {
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const connected = await testConnection();
    if (!connected) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    for (const [tableName, createSQL] of Object.entries(createTablesSQL)) {
      await createTableIfNotExists(tableName, createSQL);
    }
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await insertInitialData();
    
    console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', error);
    throw error;
  }
}

module.exports = {
  initializeDatabase,
  tableExists,
  createTableIfNotExists
};
