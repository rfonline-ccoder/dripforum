const mysql = require('mysql2/promise');
const config = require('./config.json');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã user_groups_membership
const createUserGroupsMembershipTable = async (connection) => {
  try {
    console.log('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É user_groups_membership...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
    const [tables] = await connection.execute(`
      SELECT TABLE_NAME 
      FROM information_schema.TABLES 
      WHERE TABLE_SCHEMA = ? AND TABLE_NAME = 'user_groups_membership'
    `, [config.database.database]);
    
    if (tables.length === 0) {
      console.log('üìù –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_groups_membership...');
      
      await connection.execute(`
        CREATE TABLE user_groups_membership (
          id INT AUTO_INCREMENT PRIMARY KEY,
          user_id VARCHAR(36) NOT NULL,
          group_id INT NOT NULL,
          assigned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          assigned_by VARCHAR(36),
          reason TEXT,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
          FOREIGN KEY (group_id) REFERENCES user_groups(id) ON DELETE CASCADE,
          FOREIGN KEY (assigned_by) REFERENCES users(id) ON DELETE SET NULL,
          UNIQUE KEY unique_user_group (user_id, group_id),
          INDEX idx_user_id (user_id),
          INDEX idx_group_id (group_id),
          INDEX idx_assigned_at (assigned_at)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
      `);
      
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_groups_membership —Å–æ–∑–¥–∞–Ω–∞!');
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_groups_membership —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã user_groups_membership:', error.message);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã user_achievements
const updateUserAchievementsTable = async (connection) => {
  try {
    console.log('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É user_achievements...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—è awarded_by –∏ reason
    const [columns] = await connection.execute(`
      SELECT COLUMN_NAME 
      FROM information_schema.COLUMNS 
      WHERE TABLE_SCHEMA = ? AND TABLE_NAME = 'user_achievements' AND COLUMN_NAME IN ('awarded_by', 'reason')
    `, [config.database.database]);
    
    const existingColumns = columns.map(col => col.COLUMN_NAME);
    
    if (!existingColumns.includes('awarded_by')) {
      console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ awarded_by –≤ user_achievements...');
      await connection.execute(`
        ALTER TABLE user_achievements 
        ADD COLUMN awarded_by VARCHAR(36) AFTER awarded_at,
        ADD FOREIGN KEY (awarded_by) REFERENCES users(id) ON DELETE SET NULL
      `);
      console.log('‚úÖ –ü–æ–ª–µ awarded_by –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
    }
    
    if (!existingColumns.includes('reason')) {
      console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ reason –≤ user_achievements...');
      await connection.execute(`
        ALTER TABLE user_achievements 
        ADD COLUMN reason TEXT AFTER awarded_by
      `);
      console.log('‚úÖ –ü–æ–ª–µ reason –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
    }
    
    if (existingColumns.includes('awarded_by') && existingColumns.includes('reason')) {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_achievements —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã user_achievements:', error.message);
  }
};

const checkDatabase = async () => {
  const connection = await mysql.createConnection(config.database);
  
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_groups_membership –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await createUserGroupsMembershipTable(connection);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É user_achievements –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await updateUserAchievementsTable(connection);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    console.log('üìã –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü:');
    const [tables] = await connection.execute('SHOW TABLES');
    console.log(tables);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users:');
    try {
      const [users] = await connection.execute('SELECT id, username, email, role, group_id FROM users LIMIT 10');
      if (users.length === 0) {
        console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ users –ø—É—Å—Ç–∞!');
      } else {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
        users.forEach(user => {
          console.log(`  - ID: ${user.id}, Username: ${user.username}, Role: ${user.role}, Group: ${user.group_id}`);
        });
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã users:', error.message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã
    console.log('\nüè∑Ô∏è –ì—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    try {
      const [groups] = await connection.execute('SELECT id, name, color FROM user_groups');
      if (groups.length === 0) {
        console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ user_groups –ø—É—Å—Ç–∞!');
      } else {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: ${groups.length}`);
        groups.forEach(group => {
          console.log(`  - ID: ${group.id}, Name: ${group.name}, Color: ${group.color}`);
        });
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã user_groups:', error.message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    console.log('\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:');
    try {
      const [achievements] = await connection.execute('SELECT id, name, description FROM achievements');
      if (achievements.length === 0) {
        console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ achievements –ø—É—Å—Ç–∞!');
      } else {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${achievements.length}`);
        achievements.forEach(achievement => {
          console.log(`  - ID: ${achievement.id}, Name: ${achievement.name}`);
        });
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã achievements:', error.message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –≥—Ä—É–ø–ø–∞—Ö
    console.log('\nüë• –ß–ª–µ–Ω—Å—Ç–≤–æ –≤ –≥—Ä—É–ø–ø–∞—Ö:');
    try {
      const [memberships] = await connection.execute(`
        SELECT ugm.id, u.username, ug.name as group_name, ugm.assigned_at 
        FROM user_groups_membership ugm
        LEFT JOIN users u ON ugm.user_id = u.id
        LEFT JOIN user_groups ug ON ugm.group_id = ug.id
        LIMIT 10
      `);
      if (memberships.length === 0) {
        console.log('‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ user_groups_membership –ø—É—Å—Ç–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫)');
      } else {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —á–ª–µ–Ω—Å—Ç–≤–∞: ${memberships.length}`);
        memberships.forEach(membership => {
          console.log(`  - User: ${membership.username}, Group: ${membership.group_name}, Assigned: ${membership.assigned_at}`);
        });
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã user_groups_membership:', error.message);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ:', error.message);
  } finally {
    await connection.end();
  }
};

checkDatabase();
